Пособие для начинающего

---------------------------------------------------
 Как поднять проект с нуля на Laravel с VueJS
---------------------------------------------------
1.  Регаемся на гитхаб http://github.com для хранения и обновления своего проекта в репозитории
2.  Создаем новый репозиторий для этого нажимаем на + в верхнем правом углу и выбираем New repository
3.  В Repository name указываем название проекта на инглише.
4.  Открываем новую вкладку в браузере и скачиваем клиент Git c адреса https://git-scm.com/download/win
5.  Устанавливаем Git.
6.  После установки проверяем доступен ли через коммандную строку, для этого в коммандной строке набираем git. Если доступен, то отобразятся внутренние комманды git.
7.  В браузере открываем ссылку официального репозитория php фреймворка laravel: https://github.com/laravel/laravel 
    Находим зелёную кнопку [ clone / or download ] жмякаем на неё и копируем ссылку на laravel в буфер обмена.
8.  Открываем консоль и переходим в папку OpenServer'а domains и клонируем laravel к себе на тачку, набрав git clone https://github.com/laravel/laravel.git
9.  Должна появиться папку laravel. Переименуйте её по своему усмотрению. Перейдя в папку проекта мы увидим структуру фреймворка laravel.
10. Так как сейчас проект настроен на репозитрий ларавеля, меняем его на свой для этого в папке проекта набираем git remote set-url origin https://github.com/пользователь/имя_моего_проекта.git
11. Проверяем доступность php из коммандной строки. Набираем php -? Должны отобразиться комманды php. Если нет, то прописываем в системную переменную path путь до нашего активного php.
12. Качаем composer он нам нужен для докачки модулей php. https://getcomposer.org/download/
13. Помещаем файл composer.phar в нашу папку с проектом и тестируем php composer.phar
14. В папке с проектом набираем [php composer.phar update]. Данная комманда обновляет и докачивает необходимые модули для laravel'я. 
    Также можно создать cmd файл например $update_laravel.cmd с таким содержимым что-бы оптимизировать действия обновления. После успешного выполнения в проекте должна появиться папка vendor. 
    Образно говоря, эта папка движок ларавеля.
15. Если текущим веб-сервером у вас является apache, то тогда в корне проекта создаем файл .htaccess c таким содержимым:
------------------------------------------------------------------------------------
RewriteEngine On

RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)/$ /$1 [L,R=301]

RewriteCond %{REQUEST_URI} !(\.css|\.js|\.png|\.jpg|\.gif|robots\.txt)$ [NC]
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^ index.php [L]

RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_URI} !^/public/
RewriteRule ^(css|js|images)/(.*)$ public/$1/$2 [L,NC]
------------------------------------------------------------------------------------
16. Так-же в корне проекта создаём файл index.php с содержимым:
------------------------------------------------------------------------------------
<?php

/**
 * Laravel - A PHP Framework For Web Artisans
 *
 * @package  Laravel
 * @author   Taylor Otwell <taylor@laravel.com>
 */

$uri = urldecode(
    parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)
);

// This file allows us to emulate Apache's "mod_rewrite" functionality from the
// built-in PHP web server. This provides a convenient way to test a Laravel
// application without having installed a "real" web server software here.
if ($uri !== '/' && file_exists(__DIR__.'/public'.$uri)) {
    return false;
}

require_once __DIR__.'/public/index.php';
------------------------------------------------------------------------------------
17. Удаляем файл .htaccess из папки public
18. Пробуем запустить проект. Должна появиться ошибка 500. Whoops, something went wrong on our servers.
19. Переходим в логи storage/logs и определяем ошибку. Ошибка должна быть такой: No application encryption key has been specified. Что значит отсутвует ключа шифрования.
20. Переименуем в корне конфиг проекта файл .env.example в .env
21. Сгенерируем ключ шифрования php artisan key:generate Теперь наш ключ сгенерился и записался в .env в APP_KEY
22. Запускаем проект. Готово!
23. Для работы с базой мы будем использовать phpmyadmin и MariaDB.
24. Откройте phpmyadmin и создайте новую базу
25. В корне проекта откройте файл .env и в ключ DB_DATABASE пропишите имя вашей базы. DB_USERNAME=root и DB_PASSWORD=
26. Laravel по умолчанию поддерживает авторизацию для этого наберите php artisan migrate (должна сгенерится таблица users из классов database/migrations) 
    далее наберите php artisan make:auth (должны появиться login и register на главной странице)
27. Для работы с фронтенд нам понадобиться nodejs. https://nodejs.org/en/ Веберите дистрибутив LTS Recommended for Most Users для скачки. Скачайте его и установите.
28. Проверьте доступность nodejs из коммандной строки набрав node --help
29. По умолчанию Laravel для фронтенда использует компонентный фреймворк VueJS вместо устаревшего JQuery. JQuery вещь прекрасная, но делать на нём обработку сложных интерфейсов довольно проблематично. 
    Используйте его как вспомогательный инструмент.
30. Установите необходимые модули nodejs  коммандой npm i
31. После установки в папке проекта должна появиться папка node_modules
32. Установите Vue коммандой npm i vue
33. Установите VueX хранилище коммандой npm i vuex
33. Установите Axios  коммандой npm i axios